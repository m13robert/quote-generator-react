{"version":3,"sources":["components/text/Text.js","components/button/Button.js","components/quote/Quote.js","App.js","reportWebVitals.js","index.js"],"names":["Text","text","id","Button","props","icon","onHover","rest","style","styles","button","onMouseEnter","className","cursor","fontSize","height","border","borderRadius","color","background","outline","padding","boxShadow","filter","transform","Quote","useState","bgColor","setBgColor","quote","setQuote","twitter","twitterButton","backgroundColor","getQuote","a","fetch","PROXY","res","json","data","console","log","useEffect","quoteContainer","quoteText","quoteAuthor","buttonContainer","title","onMouseOver","onMouseLeave","onClick","width","maxWidth","longQuote","marginTop","fontWeight","fontStyles","display","justifyContent","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iQAGe,SAASA,EAAT,GAAyB,IAATC,EAAQ,EAARA,KAC7B,OAAO,sBAAMC,GAAG,QAAT,SAAkBD,I,kBCDZ,SAASE,EAAOC,GAAQ,IAC7BH,EAAiCG,EAAjCH,KAAMI,EAA2BD,EAA3BC,KAAMC,EAAqBF,EAArBE,QAAYC,EADI,YACKH,EADL,2BAGpC,OACE,mCACE,mDAAYG,GAAZ,IAAkBC,MAAOC,EAAOC,OAAQC,aAAcL,EAAtD,UACGL,EADH,IACUI,GAAQ,mBAAGO,UAAWP,UAMtC,IAAMI,EAAS,CACbC,OAAQ,CACNG,OAAQ,QACRC,SAAU,SACVC,OAAQ,SACRC,OAAQ,OACRC,aAAc,OACdC,MAAO,OACPC,WAAY,OACZC,QAAS,OACTC,QAAS,gBACTC,UAAW,qCACX,UAAW,CACTC,OAAQ,oBAEV,WAAY,CACVC,UAAW,uBACXF,UAAW,wCCxBF,SAASG,IAAS,IAAD,EACAC,mBAAS,IADT,mBACvBC,EADuB,KACdC,EADc,OAEJF,mBAAS,IAFL,mBAEvBG,EAFuB,KAEhBC,EAFgB,KAIxBC,EAAU,CACdC,cAAe,CACbC,gBAAgB,GAAD,OAAKN,KAIlBO,EAAQ,uCAAG,8BAAAC,EAAA,+EAEKC,MAAMC,+GAFX,cAEPC,EAFO,gBAGMA,EAAIC,OAHV,OAGPC,EAHO,OAIbV,EAASU,GAJI,kDAMbC,QAAQC,IAAI,mCANC,0DAAH,qDAcd,OAJAC,qBAAU,WACRT,MACC,IAGD,sBAAK1B,MAAOC,EAAOmC,eAAgB1C,GAAG,kBAAtC,UAEE,sBAAKM,MAAOC,EAAOoC,UAAnB,UACE,mBAAGjC,UAAU,qBACb,cAACZ,EAAD,CAAMC,KAAM4B,EAAMgB,eAIpB,qBAAKrC,MAAOC,EAAOqC,YAAnB,SACE,cAAC9C,EAAD,CAAMC,KAAM4B,EAAMiB,gBAIpB,sBAAKtC,MAAOC,EAAOsC,gBAAnB,UACE,cAAC5C,EAAD,CACE6C,MAAM,oBACN3C,KAAK,iBACL4C,YAAa,kBAAMrB,EAAW,YAC9BsB,aAAc,kBAAMtB,EAAW,SAC/BpB,MAAOuB,EAAQC,cACf9B,GAAG,YAEL,cAACC,EAAD,CAAQD,GAAG,YAAYD,KAAK,YAAYkD,QAASjB,UAMzD,IAAMzB,EAAS,CACbmC,eAAgB,CACdQ,MAAO,OACPC,SAAU,QACVhC,QAAS,YACTJ,aAAc,OACdgB,gBAAiB,2BACjBX,UAAW,uCAEbuB,UAAW,CACT/B,SAAU,WAEZwC,UAAW,CACTxC,SAAU,QAEZgC,YAAa,CACXS,UAAW,OACXzC,SAAU,OACV0C,WAAY,MACZC,WAAY,UAEdV,gBAAiB,CACfQ,UAAW,OACXG,QAAS,OACTC,eAAgB,kBC1ELC,MARf,WACE,OACE,8BACE,cAACnC,EAAD,OCMSoC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.7cd4737a.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nexport default function Text({ text }) {\n  return <span id=\"quote\">{text}</span>;\n}\n\nText.propTypes = {\n  text: PropTypes.string,\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nexport default function Button(props) {\n  const { text, icon, onHover, ...rest } = props;\n\n  return (\n    <>\n      <button {...rest} style={styles.button} onMouseEnter={onHover}>\n        {text} {icon && <i className={icon} />}\n      </button>\n    </>\n  );\n}\n\nconst styles = {\n  button: {\n    cursor: \"point\",\n    fontSize: \"1.2rem\",\n    height: \"2.5rem\",\n    border: \"none\",\n    borderRadius: \"10px\",\n    color: \"#fff\",\n    background: \"#333\",\n    outline: \"none\",\n    padding: \"0.5rem 1.8rem\",\n    boxShadow: \"0 0.3rem rgba(121, 121, 121, 0.65)\",\n    \"&:hover\": {\n      filter: \"brightness(110%)\",\n    },\n    \"&:active\": {\n      transform: \"translate(0, 0.3rem)\",\n      boxShadow: \"0 0.1rem rgba(255, 255, 255, 0.65)\",\n    },\n  },\n};\n\nButton.propTypes = {\n  text: PropTypes.string,\n  icon: PropTypes.string,\n};\n","import React, { useState, useEffect } from \"react\";\nimport Text from \"../text/Text\";\nimport Button from \"../button/Button\";\n\nconst API_URL =\n  \"https://api.forismatic.com/api/1.0/?method=getQuote&format=json&lang=en\";\nconst PROXY = \"https://cors-anywhere.herokuapp.com/\";\n\nexport default function Quote() {\n  const [bgColor, setBgColor] = useState(\"\");\n  const [quote, setQuote] = useState(\"\");\n\n  const twitter = {\n    twitterButton: {\n      backgroundColor: `${bgColor}`,\n    },\n  };\n\n  const getQuote = async () => {\n    try {\n      const res = await fetch(PROXY + API_URL);\n      const data = await res.json();\n      setQuote(data);\n    } catch (err) {\n      console.log(\"whoops, couldn't retrieve quote\");\n    }\n  };\n\n  useEffect(() => {\n    getQuote();\n  }, []);\n\n  return (\n    <div style={styles.quoteContainer} id=\"quote-container\">\n      {/* Quote  */}\n      <div style={styles.quoteText}>\n        <i className=\"fa fa-quote-left\" />\n        <Text text={quote.quoteText} />\n      </div>\n\n      {/* Author */}\n      <div style={styles.quoteAuthor}>\n        <Text text={quote.quoteAuthor} />\n      </div>\n\n      {/* Buttons */}\n      <div style={styles.buttonContainer}>\n        <Button\n          title=\"Tweet this quote!\"\n          icon=\"fab fa-twitter\"\n          onMouseOver={() => setBgColor(\"#38a1f3\")}\n          onMouseLeave={() => setBgColor(\"#333\")}\n          style={twitter.twitterButton}\n          id=\"twitter\"\n        />\n        <Button id=\"new-quote\" text=\"New quote\" onClick={getQuote} />\n      </div>\n    </div>\n  );\n}\n\nconst styles = {\n  quoteContainer: {\n    width: \"auto\",\n    maxWidth: \"900px\",\n    padding: \"20px 30px\",\n    borderRadius: \"10px\",\n    backgroundColor: \"rgba(255, 255, 255, 0.4)\",\n    boxShadow: \"0 10px 10px 10px rgba(0, 0, 0, 0.2)\",\n  },\n  quoteText: {\n    fontSize: \"2.75rem\",\n  },\n  longQuote: {\n    fontSize: \"2rem\",\n  },\n  quoteAuthor: {\n    marginTop: \"15px\",\n    fontSize: \"2rem\",\n    fontWeight: \"400\",\n    fontStyles: \"italic\",\n  },\n  buttonContainer: {\n    marginTop: \"15px\",\n    display: \"flex\",\n    justifyContent: \"space-between\",\n  },\n};\n","import \"./App.css\";\nimport Quote from \"./components/quote/Quote\";\n\nfunction App() {\n  return (\n    <div>\n      <Quote />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}