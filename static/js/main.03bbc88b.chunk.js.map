{"version":3,"sources":["components/text/Text.js","components/button/Button.js","components/quote/Quote.js","App.js","reportWebVitals.js","index.js"],"names":["Text","text","id","Button","props","btnStyle","icon","onHover","rest","style","className","onMouseEnter","Quote","useState","quote","setQuote","loading","setLoading","disabled","setDisabled","getQuote","a","fetch","PROXY","res","json","data","quoteText","quoteAuthor","console","log","useEffect","styles","quoteContainer","length","longQuote","buttonContainer","title","onClick","twitterUrl","window","open","width","maxWidth","padding","borderRadius","backgroundColor","boxShadow","fontSize","marginTop","fontWeight","fontStyles","display","justifyContent","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iQAGe,SAASA,EAAT,GAAyB,IAATC,EAAQ,EAARA,KAC7B,OAAO,sBAAMC,GAAG,QAAT,SAAkBD,I,kBCDZ,SAASE,EAAOC,GAAQ,IAC7BC,EAA2CD,EAA3CC,SAAUJ,EAAiCG,EAAjCH,KAAMK,EAA2BF,EAA3BE,KAAMC,EAAqBH,EAArBG,QAAYC,EADN,YACeJ,EADf,sCAGpC,OACE,mCACE,mDACMI,GADN,IAEEC,MAAOJ,GAAsB,GAC7BK,UAAU,SACVC,aAAcJ,EAJhB,UAMGN,EANH,IAMUK,GAAQ,mBAAGI,UAAWJ,UCNvB,SAASM,IAAS,IAAD,EACJC,mBAAS,IADL,mBACvBC,EADuB,KAChBC,EADgB,OAEAF,oBAAS,GAFT,mBAEvBG,EAFuB,KAEdC,EAFc,OAGEJ,oBAAS,GAHX,mBAGvBK,EAHuB,KAGbC,EAHa,KAUxBC,EAAQ,uCAAG,8BAAAC,EAAA,6DACfF,GAAY,GADG,kBAGKG,MAAMC,+GAHX,cAGPC,EAHO,gBAIMA,EAAIC,OAJV,OAIPC,EAJO,OAKbX,EAASW,GACTT,GAAW,GACXE,GAAY,GAPC,kDASbJ,EAAS,CACPD,MAAO,CACLa,UAAW,kCACXC,YAAa,eAGjBX,GAAW,GACXY,QAAQC,IAAI,mCAhBC,0DAAH,qDAwBd,OAJAC,qBAAU,WACRX,MACC,IAECJ,EAAgB,qBAAKN,UAAU,WAGjC,sBAAKD,MAAOuB,EAAOC,eAAgB/B,GAAG,kBAAtC,UAEE,sBACEO,MACEK,EAAMa,UAAUO,OAAS,IAAMF,EAAOL,UAAYK,EAAOG,UAF7D,UAKE,mBAAGzB,UAAU,qBACb,cAACV,EAAD,CAAMC,KAAMa,EAAMa,eAIpB,qBAAKlB,MAAOuB,EAAOJ,YAAnB,SACE,cAAC5B,EAAD,CAAMC,KAAMa,EAAMc,YAAcd,EAAMc,YAAc,cAItD,sBAAKnB,MAAOuB,EAAOI,gBAAnB,UACE,cAACjC,EAAD,CACEkC,MAAM,oBACN/B,KAAK,iBACLJ,GAAG,UACHoC,QAtDW,WACjB,IAAMC,EAAU,gDAA4CzB,EAAMa,UAAlD,cAAiEb,EAAMc,aACvFY,OAAOC,KAAKF,EAAY,aAsDpB,cAACpC,EAAD,CACED,GAAG,YACHD,KAAK,YACLiB,SAAUA,EACVoB,QAAS,kBAAMlB,aAOzB,IAAMY,EAAS,CACbC,eAAgB,CACdS,MAAO,OACPC,SAAU,QACVC,QAAS,YACTC,aAAc,OACdC,gBAAiB,2BACjBC,UAAW,uCAEbpB,UAAW,CACTqB,SAAU,WAEZb,UAAW,CACTa,SAAU,QAEZpB,YAAa,CACXqB,UAAW,OACXD,SAAU,OACVE,WAAY,MACZC,WAAY,UAEdf,gBAAiB,CACfa,UAAW,OACXG,QAAS,OACTC,eAAgB,kBC7FLC,MARf,WACE,OACE,8BACE,cAAC1C,EAAD,OCMS2C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.03bbc88b.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nexport default function Text({ text }) {\n  return <span id=\"quote\">{text}</span>;\n}\n\nText.propTypes = {\n  text: PropTypes.string,\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nexport default function Button(props) {\n  const { btnStyle, text, icon, onHover, ...rest } = props;\n\n  return (\n    <>\n      <button\n        {...rest}\n        style={btnStyle ? btnStyle : {}}\n        className=\"button\"\n        onMouseEnter={onHover}\n      >\n        {text} {icon && <i className={icon} />}\n      </button>\n    </>\n  );\n}\n\nButton.propTypes = {\n  text: PropTypes.string,\n  icon: PropTypes.string,\n};\n","import React, { useState, useEffect } from \"react\";\nimport Text from \"../text/Text\";\nimport Button from \"../button/Button\";\n\nconst API_URL =\n  \"https://api.forismatic.com/api/1.0/?method=getQuote&format=json&lang=en\";\nconst PROXY = \"https://cors-anywhere.herokuapp.com/\";\n\nexport default function Quote() {\n  const [quote, setQuote] = useState(\"\");\n  const [loading, setLoading] = useState(true);\n  const [disabled, setDisabled] = useState(true);\n\n  const tweetQuote = () => {\n    const twitterUrl = `https://twitter.com/intent/tweet?text=${quote.quoteText} - ${quote.quoteAuthor}`;\n    window.open(twitterUrl, \"_blank\");\n  };\n\n  const getQuote = async () => {\n    setDisabled(true);\n    try {\n      const res = await fetch(PROXY + API_URL);\n      const data = await res.json();\n      setQuote(data);\n      setLoading(false);\n      setDisabled(false);\n    } catch (err) {\n      setQuote({\n        quote: {\n          quoteText: \"Whoops, couldn't retrieve quote\",\n          quoteAuthor: \"Not Found\",\n        },\n      });\n      setLoading(false);\n      console.log(\"whoops, couldn't retrieve quote\");\n    }\n  };\n\n  useEffect(() => {\n    getQuote();\n  }, []);\n\n  if (loading) return <div className=\"loader\"></div>;\n\n  return (\n    <div style={styles.quoteContainer} id=\"quote-container\">\n      {/* Quote  */}\n      <div\n        style={\n          quote.quoteText.length < 120 ? styles.quoteText : styles.longQuote\n        }\n      >\n        <i className=\"fa fa-quote-left\" />\n        <Text text={quote.quoteText} />\n      </div>\n\n      {/* Author */}\n      <div style={styles.quoteAuthor}>\n        <Text text={quote.quoteAuthor ? quote.quoteAuthor : \"Unknown\"} />\n      </div>\n\n      {/* Buttons */}\n      <div style={styles.buttonContainer}>\n        <Button\n          title=\"Tweet this quote!\"\n          icon=\"fab fa-twitter\"\n          id=\"twitter\"\n          onClick={tweetQuote}\n        />\n        <Button\n          id=\"new-quote\"\n          text=\"New quote\"\n          disabled={disabled}\n          onClick={() => getQuote()}\n        />\n      </div>\n    </div>\n  );\n}\n\nconst styles = {\n  quoteContainer: {\n    width: \"auto\",\n    maxWidth: \"900px\",\n    padding: \"20px 30px\",\n    borderRadius: \"10px\",\n    backgroundColor: \"rgba(255, 255, 255, 0.4)\",\n    boxShadow: \"0 10px 10px 10px rgba(0, 0, 0, 0.2)\",\n  },\n  quoteText: {\n    fontSize: \"2.75rem\",\n  },\n  longQuote: {\n    fontSize: \"2rem\",\n  },\n  quoteAuthor: {\n    marginTop: \"15px\",\n    fontSize: \"2rem\",\n    fontWeight: \"400\",\n    fontStyles: \"italic\",\n  },\n  buttonContainer: {\n    marginTop: \"15px\",\n    display: \"flex\",\n    justifyContent: \"space-between\",\n  },\n};\n","import \"./App.css\";\nimport Quote from \"./components/quote/Quote\";\n\nfunction App() {\n  return (\n    <div>\n      <Quote />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}